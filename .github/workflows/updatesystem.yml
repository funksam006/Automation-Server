name: Project Backup via SSH (Self-Hosted)

on:
  workflow_dispatch:  # Manual trigger
  schedule:
    - cron: '0 3 * * *'  # Daily at 3 AM UTC

jobs:
  backup:
    runs-on: self-hosted  # Requires your own runner with network access to servers

    steps:
    - name: Validate Required Secrets
      run: |
        required_secrets=(SSH_PRIVATE_KEY REMOTE_HOST REMOTE_USER PROJECT_PATH BACKUP_SERVER BACKUP_USER BACKUP_PATH)
        for secret in "${required_secrets[@]}"; do
          if [ -z "${{ secrets[$secret] }}" ]; then
            echo "‚ùå Missing secret: $secret"
            exit 1
          fi
        done

    - name: Set up SSH key and known_hosts
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

        echo "üîç Scanning SSH host keys..."
        ssh-keyscan -H "${{ secrets.REMOTE_HOST }}" >> ~/.ssh/known_hosts 2>/dev/null || echo "‚ö†Ô∏è Could not scan REMOTE_HOST"
        ssh-keyscan -H "${{ secrets.BACKUP_SERVER }}" >> ~/.ssh/known_hosts 2>/dev/null || echo "‚ö†Ô∏è Could not scan BACKUP_SERVER"

        echo "‚úÖ SSH setup complete."

    - name: Debug DNS resolution
      run: |
        echo "üîß Testing DNS and connectivity..."
        nslookup "${{ secrets.REMOTE_HOST }}" || echo "‚ö†Ô∏è DNS failed for REMOTE_HOST"
        nslookup "${{ secrets.BACKUP_SERVER }}" || echo "‚ö†Ô∏è DNS failed for BACKUP_SERVER"
        ping -c 2 "${{ secrets.REMOTE_HOST }}" || echo "‚ö†Ô∏è Cannot reach REMOTE_HOST"
        ping -c 2 "${{ secrets.BACKUP_SERVER }}" || echo "‚ö†Ô∏è Cannot reach BACKUP_SERVER"

    - name: Create tar.gz on remote server
      run: |
        echo "üì¶ Creating archive on remote server..."
        ssh "${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}" "tar -czf /tmp/project_backup.tar.gz -C $(dirname '${{ secrets.PROJECT_PATH }}') $(basename '${{ secrets.PROJECT_PATH }}')"
        echo "‚úÖ Archive created at /tmp/project_backup.tar.gz"

    - name: Transfer archive to backup server
      run: |
        TIMESTAMP=$(date +%F_%H-%M-%S)
        BACKUP_FILENAME="project_backup_${TIMESTAMP}.tar.gz"
        echo "üöö Transferring archive to backup server as ${BACKUP_FILENAME}..."

        scp "${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/tmp/project_backup.tar.gz" \
            "${{ secrets.BACKUP_USER }}@${{ secrets.BACKUP_SERVER }}:${{ secrets.BACKUP_PATH }}/${BACKUP_FILENAME}"

        echo "‚úÖ Backup transferred successfully to backup server."
