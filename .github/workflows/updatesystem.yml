name: Project Backup via SSH

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'  # Every day at 3 AM UTC

jobs:
  backup:
    runs-on: self-hosted  # Ensure this is a self-hosted runner

    steps:
    - name: Validate Required Secrets
      run: |
        missing=0

        if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
          echo "‚ùå Missing SSH_PRIVATE_KEY"
          missing=1
        fi
        if [ -z "${{ secrets.REMOTE_HOST }}" ]; then
          echo "‚ùå Missing REMOTE_HOST"
          missing=1
        fi
        if [ -z "${{ secrets.REMOTE_USER }}" ]; then
          echo "‚ùå Missing REMOTE_USER"
          missing=1
        fi
        if [ -z "${{ secrets.PROJECT_PATH }}" ]; then
          echo "‚ùå Missing PROJECT_PATH"
          missing=1
        fi
        if [ -z "${{ secrets.BACKUP_SERVER }}" ]; then
          echo "‚ùå Missing BACKUP_SERVER"
          missing=1
        fi
        if [ -z "${{ secrets.BACKUP_USER }}" ]; then
          echo "‚ùå Missing BACKUP_USER"
          missing=1
        fi
        if [ -z "${{ secrets.BACKUP_PATH }}" ]; then
          echo "‚ùå Missing BACKUP_PATH"
          missing=1
        fi

        if [ "$missing" -eq 1 ]; then
          echo "üö´ One or more required secrets are missing. Failing the workflow."
          exit 1
        fi

    - name: Set up SSH key and known_hosts
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

        ssh-keyscan -H "${{ secrets.REMOTE_HOST }}" >> ~/.ssh/known_hosts 2>/dev/null || echo "‚ö†Ô∏è Could not scan REMOTE_HOST"
        ssh-keyscan -H "${{ secrets.BACKUP_SERVER }}" >> ~/.ssh/known_hosts 2>/dev/null || echo "‚ö†Ô∏è Could not scan BACKUP_SERVER"

    - name: Create tar.gz on remote server
      run: |
        echo "üì¶ Creating archive on remote server..."
        ssh "${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}" "tar -czf /tmp/project_backup.tar.gz -C $(dirname '${{ secrets.PROJECT_PATH }}') $(basename '${{ secrets.PROJECT_PATH }}')"

    - name: Transfer archive to backup server
      run: |
        TIMESTAMP=$(date +%F_%H-%M-%S)
        BACKUP_FILENAME="project_backup_${TIMESTAMP}.tar.gz"

        echo "üöö Transferring archive to backup server as ${BACKUP_FILENAME}..."

#        scp "${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/tmp/project_backup.tar.gz" \
#            "${{ secrets.BACKUP_USER }}@${{ secrets.BACKUP_SERVER }}:${{ secrets.BACKUP_PATH }}/${BACKUP_FILENAME}"
